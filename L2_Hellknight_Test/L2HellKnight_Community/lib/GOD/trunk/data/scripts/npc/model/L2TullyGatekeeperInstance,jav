package npc.model;

import java.util.Calendar;

import l2rt.common.ThreadPoolManager;
import l2rt.gameserver.instancemanager.ServerVariables;
import l2rt.gameserver.model.L2Player;
import l2rt.gameserver.model.L2Party;
import l2rt.gameserver.model.instances.L2NpcInstance;
import l2rt.gameserver.model.instances.L2DoorInstance;
import l2rt.gameserver.model.quest.Quest;
import l2rt.gameserver.tables.DoorTable;
import l2rt.gameserver.serverpackets.NpcHtmlMessage;
import l2rt.gameserver.templates.L2NpcTemplate;
import l2rt.util.Rnd;

public class L2TullyGatekeeperInstance extends L2NpcInstance
{
	static int [][][] doorMeneger =
	{
		{{ 18445 }, { 19260002, 19260001 }},
		{{ 18446 }, { 19260003 }},
		{{ 18447 }, { 19260004, 19260005 }},
		{{ 18448 }, { 19260006, 19260007 }},
		{{ 18449 }, { 19260008 }},
		{{ 18450 }, { 19260010 }},
		{{ 18451 }, { 19260012 }},
		{{ 18452 }, { 19260009, 19260011 }},
		{{ 18453 }, { 19260014, 19260013 }},
		{{ 18454 }, { 19260023, 19260015 }},
		{{ 18455 }, { 19260016, 19260019 }},
		{{ 18456 }, { 19260017 }},
		{{ 18457 }, { 19260021, 19260020 }},
		{{ 18458 }, { 19260022 }},
		{{ 18459 }, { 19260018 }},
		{{ 18460 }, { 19260051 }},
		{{ 18461 }, { 19260052 }}
	};
	
	public L2TullyGatekeeperInstance(int objectID, L2NpcTemplate template)
	{
		super(objectID, template);
	}

	@Override
	public void showChatWindow(L2Player player, int val)
	{
		String value = ServerVariables.getLong("OpenDoor - " + getNpcId(), 0);
        if(value != 0)
		{
			long time = Long.parseLong(value);
			if(time > Calendar.getInstance().getTimeInMillis())
				showHtmlFile(player, "device_operate001a.htm");
		}
		if(player.getClassId().getId() != 118)
			showHtmlFile(player, "device_operate001.htm");
		else 
		    showHtmlFile(player, "device_operate001a.htm");
		
		super.showChatWindow(player, val);
	}

	@Override
	public void onBypassFeedback(L2Player player, String command)
	{
		L2Party party = player.getParty();
		
		if(command.startsWith("open_gate"))
		{
			for(final int [][] index : doorMeneger)
				if(index[0][0] == getNpcId())
				{
					if(player.getClassId().getId() == 118 || Rnd.chance(25))
						for(final int door : index[1])
						{
							final L2DoorInstance doorObj = DoorTable.getInstance().getDoor(door);
							if(door != 19260051 && door != 19260052)
								ThreadPoolManager.getInstance().scheduleGeneral(new CloseDoor(door), 60000);
							doorObj.openMe();
						}
					//Quest.startQuestTimer("OpenDoor - " + getNpcId(), String.valueOf(Calendar.getInstance().getTimeInMillis() + 120000), party);
					ServerVariables.set("OpenDoor - " + getNpcId(), Calendar.getInstance().getTimeInMillis() + 120000);
				}
		}
		else
			super.onBypassFeedback(player, command);
	}
	
	class CloseDoor implements Runnable
	{
		int doorId;
		public CloseDoor(int doorId)
		{
			this.doorId = doorId;
		}

		@Override
		public void run()
		{
			DoorTable.getInstance().getDoor(doorId).closeMe();
		}
	}

	public void showHtmlFile(L2Player player, String file)
	{
		NpcHtmlMessage html = new NpcHtmlMessage(player, this);
		html.setFile("data/html/Tully/" + file);
		html.replace("%npcname%", getName());
		player.sendPacket(html);
	}
}